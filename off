#!/bin/bash

#dns hostname
dnsHost_NBX_Can=( "nbxcanaryeapp1.vpc.verizon.com" "nbxcanaryeapp2.vpc.verizon.com" "nbxcanaryeapp3.vpc.verizon.com" "nbxcanaryeapp4.vpc.verizon.com" "nbxcanaryeapp5.vpc.verizon.com" "nbxcanaryebg1.vpc.verizon.com" "nbxcanaryebg2.vpc.verizon.com" "nbxcanaryestream1.vpc.verizon.com" "nbxcanaryestream2.vpc.verizon.com" )
dnsHost_NBX_East=( "nbxeapp1.vpc.verizon.com" "nbxeapp2.vpc.verizon.com"  "nbxeapp3.vpc.verizon.com"  "nbxeapp4.vpc.verizon.com"  "nbxeapp5.vpc.verizon.com"  "nbxeapp6.vpc.verizon.com"  "nbxeapp7.vpc.verizon.com"  "nbxeapp8.vpc.verizon.com"  "nbxeapp9.vpc.verizon.com"  "nbxeapp10.vpc.verizon.com"  "nbxeapp11.vpc.verizon.com"  "nbxeapp12.vpc.verizon.com"  "nbxeapp13.vpc.verizon.com"  "nbxeapp14.vpc.verizon.com"  "nbxeapp15.vpc.verizon.com"  "nbxeapp16.vpc.verizon.com"  "nbxeapp17.vpc.verizon.com"  "nbxeapp18.vpc.verizon.com"  "nbxeapp19.vpc.verizon.com"  "nbxeapp20.vpc.verizon.com"  "nbxeapp21.vpc.verizon.com"  "nbxeapp22.vpc.verizon.com"  "nbxeapp23.vpc.verizon.com"  "nbxeapp24.vpc.verizon.com"  "nbxeapp25.vpc.verizon.com"  "nbxeapp26.vpc.verizon.com"  "nbxeapp27.vpc.verizon.com"  "nbxeapp28.vpc.verizon.com"  "nbxeapp29.vpc.verizon.com"  "nbxeapp30.vpc.verizon.com"  "nbxeapp31.vpc.verizon.com"  "nbxeapp32.vpc.verizon.com"  "nbxeapp33.vpc.verizon.com"  "nbxeapp34.vpc.verizon.com"  "nbxeapp35.vpc.verizon.com"  "nbxeapp36.vpc.verizon.com"  "nbxeapp37.vpc.verizon.com"  "nbxeapp38.vpc.verizon.com"  "nbxeapp39.vpc.verizon.com"  "nbxeapp40.vpc.verizon.com"  "nbxekaf1.vpc.verizon.com"  "nbxekaf2.vpc.verizon.com"  "nbxekaf3.vpc.verizon.com"  "nbxestream1.vpc.verizon.com"  "nbxestream2.vpc.verizon.com" )
dnsHost_NBX_West=( "nbxwapp1.vpc.verizon.com"  "nbxwapp2.vpc.verizon.com"  "nbxwapp3.vpc.verizon.com"  "nbxwapp4.vpc.verizon.com"  "nbxwapp5.vpc.verizon.com"  "nbxwapp6.vpc.verizon.com"  "nbxwapp7.vpc.verizon.com"  "nbxwapp8.vpc.verizon.com"  "nbxwapp9.vpc.verizon.com"  "nbxwapp10.vpc.verizon.com"  "nbxwapp11.vpc.verizon.com"  "nbxwapp12.vpc.verizon.com"  "nbxwapp13.vpc.verizon.com"  "nbxwapp14.vpc.verizon.com"  "nbxwapp15.vpc.verizon.com"  "nbxwapp16.vpc.verizon.com"  "nbxwapp17.vpc.verizon.com"  "nbxwapp18.vpc.verizon.com"  "nbxwapp19.vpc.verizon.com"  "nbxwapp20.vpc.verizon.com"  "nbxwapp21.vpc.verizon.com"  "nbxwapp22.vpc.verizon.com"  "nbxwapp23.vpc.verizon.com"  "nbxwapp24.vpc.verizon.com"  "nbxwapp25.vpc.verizon.com"  "nbxwapp26.vpc.verizon.com"  "nbxwapp27.vpc.verizon.com"  "nbxwapp28.vpc.verizon.com"  "nbxwapp29.vpc.verizon.com"  "nbxwapp30.vpc.verizon.com"  "nbxwapp31.vpc.verizon.com"  "nbxwapp32.vpc.verizon.com"  "nbxwapp33.vpc.verizon.com"  "nbxwapp34.vpc.verizon.com"  "nbxwapp35.vpc.verizon.com"  "nbxwkaf1.vpc.verizon.com"  "nbxwkaf2.vpc.verizon.com"  "nbxwkaf3.vpc.verizon.com"  "nbxwstream1.vpc.verizon.com"  "nbxwstream2.vpc.verizon.com" )
dnsHost_EHUB_East=( "rtdehubeapp1.vpc.verizon.com" "rtdehubeapp2.vpc.verizon.com" "rtdehubeapp3.vpc.verizon.com" "rtdehubeapp4.vpc.verizon.com" "rtdehubeapp5.vpc.verizon.com" "rtdehubeapp6.vpc.verizon.com" "rtdehubeapp7.vpc.verizon.com" "rtdehubeapp8.vpc.verizon.com" "rtdehubeapp9.vpc.verizon.com" "rtdehubeapp10.vpc.verizon.com" "rtdehubeapp11.vpc.verizon.com" "rtdehubeapp12.vpc.verizon.com" "rtdehubeapp13.vpc.verizon.com" "rtdehubeapp14.vpc.verizon.com" "rtdehubeapp15.vpc.verizon.com" "rtdehubeapp16.vpc.verizon.com" "rtdehubeapp17.vpc.verizon.com" "rtdehubeapp18.vpc.verizon.com" "rtdehubeapp19.vpc.verizon.com" "rtdehubeapp20.vpc.verizon.com" "rtdehubebg1.vpc.verizon.com" "rtdehubebg2.vpc.verizon.com" "rtdehubestream1.vpc.verizon.com" "rtdehubestream2.vpc.verizon.com" )
dnsHost_EHUB_West=( "rtdehubwapp1.vpc.verizon.com" "rtdehubwapp2.vpc.verizon.com" "rtdehubwapp3.vpc.verizon.com" "rtdehubwapp4.vpc.verizon.com" "rtdehubwapp5.vpc.verizon.com" "rtdehubwapp6.vpc.verizon.com" "rtdehubwapp7.vpc.verizon.com" "rtdehubwapp8.vpc.verizon.com" "rtdehubwapp9.vpc.verizon.com" "rtdehubwapp10.vpc.verizon.com" "rtdehubwapp11.vpc.verizon.com" "rtdehubwapp12.vpc.verizon.com" "rtdehubwapp13.vpc.verizon.com" "rtdehubwapp14.vpc.verizon.com" "rtdehubwapp15.vpc.verizon.com" "rtdehubwapp16.vpc.verizon.com" "rtdehubwapp17.vpc.verizon.com" "rtdehubwapp18.vpc.verizon.com" "rtdehubwapp19.vpc.verizon.com" "rtdehubwapp20.vpc.verizon.com" "rtdehubwbg1.vpc.verizon.com" "rtdehubwbg2.vpc.verizon.com" "rtdehubwstream1.vpc.verizon.com" "rtdehubwstream2.vpc.verizon.com" )
dnsHost_CDH_East=( "cdh8eapp1.vpc.verizon.com" "cdh8eapp2.vpc.verizon.com" "cdh8eapp3.vpc.verizon.com" "cdh8eapp4.vpc.verizon.com" "cdh8eapp5.vpc.verizon.com" "cdh8eapp6.vpc.verizon.com" "cdh8eapp7.vpc.verizon.com" "cdh8eapp8.vpc.verizon.com" "cdh8eapp9.vpc.verizon.com" "cdh8eapp10.vpc.verizon.com" "cdh8eapp11.vpc.verizon.com" "cdh8eapp12.vpc.verizon.com" "cdh8eapp13.vpc.verizon.com" "cdh8eapp14.vpc.verizon.com" "cdh8eapp15.vpc.verizon.com" "cdh8eapp16.vpc.verizon.com" "cdh8eapp17.vpc.verizon.com" "cdh8eapp18.vpc.verizon.com" "cdh8eapp19.vpc.verizon.com" "cdh8eapp20.vpc.verizon.com" "cdh8eapp21.vpc.verizon.com" "cdh8eapp22.vpc.verizon.com" "cdh8eapp23.vpc.verizon.com" "cdh8eapp24.vpc.verizon.com" "cdh8eapp25.vpc.verizon.com" "cdh8eapp26.vpc.verizon.com" "cdh8eapp27.vpc.verizon.com" "cdh8eapp28.vpc.verizon.com" "cdh8eapp29.vpc.verizon.com" "cdh8eapp30.vpc.verizon.com" "cdh8eapp31.vpc.verizon.com" "cdh8eapp32.vpc.verizon.com" "cdh8eapp33.vpc.verizon.com" "cdh8eapp34.vpc.verizon.com" "cdh8eapp35.vpc.verizon.com" "rtd8ebg1.vpc.verizon.com" "rtd8ebg2.vpc.verizon.com" "rtd8ebg3.vpc.verizon.com" "rtd8ebg4.vpc.verizon.com" "rtd8ebg5.vpc.verizon.com" "rtdpleapp1.vpc.verizon.com" )
dnsHost_CDH_West=( "cdh8wapp1.vpc.verizon.com" "cdh8wapp2.vpc.verizon.com" "cdh8wapp3.vpc.verizon.com" "cdh8wapp4.vpc.verizon.com" "cdh8wapp5.vpc.verizon.com" "cdh8wapp6.vpc.verizon.com" "cdh8wapp7.vpc.verizon.com" "cdh8wapp8.vpc.verizon.com" "cdh8wapp9.vpc.verizon.com" "cdh8wapp10.vpc.verizon.com" "cdh8wapp11.vpc.verizon.com" "cdh8wapp12.vpc.verizon.com" "cdh8wapp13.vpc.verizon.com" "cdh8wapp14.vpc.verizon.com" "cdh8wapp15.vpc.verizon.com" "cdh8wapp16.vpc.verizon.com" "cdh8wapp17.vpc.verizon.com" "cdh8wapp18.vpc.verizon.com" "cdh8wapp19.vpc.verizon.com" "cdh8wapp20.vpc.verizon.com" "cdh8wapp21.vpc.verizon.com" "cdh8wapp22.vpc.verizon.com" "cdh8wapp23.vpc.verizon.com" "cdh8wapp24.vpc.verizon.com" "cdh8wapp25.vpc.verizon.com" "cdh8wapp26.vpc.verizon.com" "cdh8wapp27.vpc.verizon.com" "cdh8wapp28.vpc.verizon.com" "cdh8wapp29.vpc.verizon.com" "cdh8wapp30.vpc.verizon.com" "cdh8wapp31.vpc.verizon.com" "cdh8wapp32.vpc.verizon.com" "cdh8wapp33.vpc.verizon.com" "cdh8wapp34.vpc.verizon.com" "cdh8wapp35.vpc.verizon.com" "rtd8wbg1.vpc.verizon.com" "rtd8wbg2.vpc.verizon.com" "rtd8wbg3.vpc.verizon.com" "rtd8wbg4.vpc.verizon.com" "rtd8wbg5.vpc.verizon.com" "rtdplwapp1.vpc.verizon.com" )
dnsHost_OMP_East=( "ompeapp1.vpc.verizon.com" "ompeapp2.vpc.verizon.com" "ompeapp3.vpc.verizon.com" "ompeapp4.vpc.verizon.com" "ompeapp5.vpc.verizon.com" "ompeapp6.vpc.verizon.com" "ompeapp7.vpc.verizon.com" "ompeapp8.vpc.verizon.com" "ompeapp9.vpc.verizon.com" "ompeapp10.vpc.verizon.com" "ompeapp11.vpc.verizon.com" "ompeapp12.vpc.verizon.com" "ompeapp13.vpc.verizon.com" "ompeapp14.vpc.verizon.com" "ompeapp15.vpc.verizon.com" "ompeapp16.vpc.verizon.com" "ompeapp17.vpc.verizon.com" "ompeapp18.vpc.verizon.com" "ompeapp19.vpc.verizon.com" "ompeapp20.vpc.verizon.com" "ompeapp21.vpc.verizon.com" "ompeapp22.vpc.verizon.com" "ompeapp23.vpc.verizon.com" "ompeapp24.vpc.verizon.com" "ompeapp25.vpc.verizon.com" "ompeapp26.vpc.verizon.com" "ompeapp27.vpc.verizon.com" "ompeapp28.vpc.verizon.com" "ompeapp29.vpc.verizon.com" "ompeapp30.vpc.verizon.com" "ompeapp31.vpc.verizon.com" "ompeapp32.vpc.verizon.com" "ompeapp33.vpc.verizon.com" "ompeapp34.vpc.verizon.com" "ompeapp35.vpc.verizon.com" "b2bompeapp1.vpc.verizon.com" "b2bompeapp2.vpc.verizon.com" "b2bompeapp3.vpc.verizon.com" "b2bompeapp4.vpc.verizon.com" "b2bompeapp5.vpc.verizon.com" "ompebg1.vpc.verizon.com" "ompebg2.vpc.verizon.com" "ompestream1.vpc.verizon.com" "ompestream2.vpc.verizon.com" )
dnsHost_OMP_West=( "ompwapp1.vpc.verizon.com" "ompwapp2.vpc.verizon.com" "ompwapp3.vpc.verizon.com" "ompwapp4.vpc.verizon.com" "ompwapp5.vpc.verizon.com" "ompwapp6.vpc.verizon.com" "ompwapp7.vpc.verizon.com" "ompwapp8.vpc.verizon.com" "ompwapp9.vpc.verizon.com" "ompwapp10.vpc.verizon.com" "ompwapp11.vpc.verizon.com" "ompwapp12.vpc.verizon.com" "ompwapp13.vpc.verizon.com" "ompwapp14.vpc.verizon.com" "ompwapp15.vpc.verizon.com" "ompwapp16.vpc.verizon.com" "ompwapp17.vpc.verizon.com" "ompwapp18.vpc.verizon.com" "ompwapp19.vpc.verizon.com" "ompwapp20.vpc.verizon.com" "ompwapp21.vpc.verizon.com" "ompwapp22.vpc.verizon.com" "ompwapp23.vpc.verizon.com" "ompwapp24.vpc.verizon.com" "ompwapp25.vpc.verizon.com" "ompwapp26.vpc.verizon.com" "ompwapp27.vpc.verizon.com" "ompwapp28.vpc.verizon.com" "ompwapp29.vpc.verizon.com" "ompwapp30.vpc.verizon.com" "ompwapp31.vpc.verizon.com" "ompwapp32.vpc.verizon.com" "ompwapp33.vpc.verizon.com" "ompwapp34.vpc.verizon.com" "ompwapp35.vpc.verizon.com" "b2bompwapp1.vpc.verizon.com" "b2bompwapp2.vpc.verizon.com" "b2bompwapp3.vpc.verizon.com" "b2bompwapp4.vpc.verizon.com" "b2bompwapp5.vpc.verizon.com" "ompwbg1.vpc.verizon.com" "ompwbg2.vpc.verizon.com" "ompwstream1.vpc.verizon.com" "ompwstream2.vpc.verizon.com" )
dnsHost_ADMIN_East=( "ompadmineapp1.vpc.verizon.com" "ompadmineapp2.vpc.verizon.com" )
dnsHost_ADMIN_West=( "ompadminwapp1.vpc.verizon.com" "ompadminwapp2.vpc.verizon.com" )
#ports
ports_nbx=(5451 5452 5453 5454) 
ports_nbxcan=(5451 5452 5453 5454)
ports_ehub=(5401 5402 5403 5404)
ports_cdh=(5451 5452 5453 5454)
ports_omp=(5401 5402 5403 5404)
ports_admin=(5451 5452 5453 5454)

if [[ "$App" == "RTD" && "$Region" == "East" && "$Channel" == "NBX" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_NBX_East[@]}"; do
		   ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
		   if [ -z "$ipAddress" ]; then
			 echo "No IP Address found for: $host"
		   else
			 echo "IP Address for $host:$ipAddress"
             for port in "${ports_nbx[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
           fi
        done
elif [[ "$App" == "RTD" && "$Region" == "West" && "$Channel" == "NBX" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_NBX_West[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_nbx[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
           fi
		done
elif [[ "$App" == "RTD" && "$Region" == "Canary" && "$Channel" == "NBXCan" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_NBX_Can[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress" 
             for port in "${ports_nbxcan[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "East" && "$Channel" == "EHUB" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_EHUB_East[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_ehub[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "West" && "$Channel" == "EHUB" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_EHUB_West[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_ehub[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "East" && "$Channel" == "CDH" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_CDH_East[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_cdh[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "West" && "$Channel" == "CDH" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_CDH_West[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_cdh[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "East" && "$Channel" == "OMP" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_OMP_East[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_omp[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "West" && "$Channel" == "OMP" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_OMP_West[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_omp[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		    fi
		done
elif [[ "$App" == "RTD" && "$Region" == "East" && "$Channel" == "ADMIN" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_ADMIN_East[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_admin[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		   fi
		done
elif [[ "$App" == "RTD" && "$Region" == "West" && "$Channel" == "ADMIN" ]]; then
#Iterating over each host to check if we got any ip address
		for host in "${dnsHost_ADMIN_West[@]}"; do
	#fetch the ip address for the DNS host
		ipAddress=$(nslookup "$host" | awk '/^Address: /{ print $2}')
	#check if the IP address is empty
		if [ -z "$ipAddress" ]; then
			echo "No IP Address found for: $host"
		else
			echo "IP Address for $host:$ipAddress"
             for port in "${ports_admin[@]}"; do
                STATUS=$(telnet "$ipAddress" "$port" | gawk 'FNR == 2 {print}' | gawk '{print $1}') 
                if [[ "$STATUS" == Connected ]]; then
                    echo "$host($ipAddress) with $port is connected"
                else
                    echo "$host($ipAddress) with $port connection failed"
                fi
             done
		    fi
		done
else 
    echo "Encountered an error in the script"
fi	
